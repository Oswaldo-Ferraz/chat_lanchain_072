name: Deploy to VPS
on:
  push:
    branches: [ main ]
  workflow_dispatch: # Permite executar manualmente

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: üöÄ Checkout code
        uses: actions/checkout@v4
      
      - name: üîç Get current stack info
        id: stack-info
        run: |
          # Buscar stack existente no Portainer
          STACK_ID=$(curl -s -H "X-API-Key: ${{ secrets.PORTAINER_TOKEN }}" \
            "${{ secrets.PORTAINER_URL }}/api/stacks" | \
            jq -r '.[] | select(.Name=="langchain-api") | .Id // empty')
          
          if [ ! -z "$STACK_ID" ]; then
            echo "stack_exists=true" >> $GITHUB_OUTPUT
            echo "stack_id=$STACK_ID" >> $GITHUB_OUTPUT
            echo "‚úÖ Stack existente encontrada: ID $STACK_ID"
          else
            echo "stack_exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Stack n√£o encontrada - ser√° criada nova"
          fi
      
      - name: üîÑ Update existing stack
        if: steps.stack-info.outputs.stack_exists == 'true'
        run: |
          echo "üîÑ Atualizando stack existente..."
          
          # Atualizar stack via Git Repository method
          curl -X PUT \
            -H "X-API-Key: ${{ secrets.PORTAINER_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ secrets.PORTAINER_URL }}/api/stacks/${{ steps.stack-info.outputs.stack_id }}/git/redeploy" \
            -d '{
              "env": [
                {
                  "name": "OPENAI_API_KEY",
                  "value": "${{ secrets.OPENAI_API_KEY }}"
                }
              ],
              "prune": true,
              "pullImage": true
            }' | jq '.'
          
          echo "‚úÖ Stack atualizada com sucesso!"
      
      - name: üÜï Create new stack
        if: steps.stack-info.outputs.stack_exists == 'false'
        run: |
          echo "üÜï Criando nova stack..."
          
          # Criar nova stack via Repository method
          curl -X POST \
            -H "X-API-Key: ${{ secrets.PORTAINER_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ secrets.PORTAINER_URL }}/api/stacks/create/swarm/repository" \
            -d '{
              "name": "langchain-api",
              "swarmID": "1",
              "repositoryURL": "https://github.com/Oswaldo-Ferraz/chat_lanchain_072",
              "repositoryReferenceName": "",
              "composeFile": "langchain_fastapi.yml",
              "env": [
                {
                  "name": "OPENAI_API_KEY",
                  "value": "${{ secrets.OPENAI_API_KEY }}"
                }
              ],
              "repositoryAuthentication": false,
              "autoUpdate": {
                "interval": "5m",
                "webhook": ""
              }
            }' | jq '.'
          
          echo "‚úÖ Nova stack criada com sucesso!"
      
      - name: ‚è≥ Wait for deployment
        run: |
          echo "‚è≥ Aguardando deploy completar..."
          sleep 30
      
      - name: üè• Health check
        run: |
          echo "üè• Verificando sa√∫de da aplica√ß√£o..."
          
          # Tentar 5 vezes com intervalo de 10s
          for i in {1..5}; do
            if curl -f -s "http://147.79.83.6:8000/health" | jq -r '.status' | grep -q "healthy"; then
              echo "‚úÖ Aplica√ß√£o est√° saud√°vel!"
              echo "üîó API dispon√≠vel em: http://147.79.83.6:8000"
              echo "üìö Documenta√ß√£o em: http://147.79.83.6:8000/docs"
              exit 0
            else
              echo "‚è≥ Tentativa $i/5 - aplica√ß√£o ainda n√£o est√° pronta..."
              sleep 10
            fi
          done
          
          echo "‚ùå Falha no health check ap√≥s 5 tentativas"
          echo "üìã Logs do container para debug:"
          curl -s -H "X-API-Key: ${{ secrets.PORTAINER_TOKEN }}" \
            "${{ secrets.PORTAINER_URL }}/api/endpoints/1/docker/containers/json" | \
            jq -r '.[] | select(.Names[] | contains("langchain")) | .Id' | head -1 | \
            xargs -I {} curl -s -H "X-API-Key: ${{ secrets.PORTAINER_TOKEN }}" \
            "${{ secrets.PORTAINER_URL }}/api/endpoints/1/docker/containers/{}/logs?stdout=1&stderr=1&tail=50"
          exit 1
      
      - name: üì¢ Deploy success notification
        if: success()
        run: |
          echo "üéâ Deploy realizado com sucesso!"
          echo "üìä Resumo do deploy:"
          echo "  ‚Ä¢ Reposit√≥rio: ${{ github.repository }}"
          echo "  ‚Ä¢ Branch: ${{ github.ref_name }}"
          echo "  ‚Ä¢ Commit: ${{ github.sha }}"
          echo "  ‚Ä¢ Autor: ${{ github.actor }}"
          echo "  ‚Ä¢ URL: http://147.79.83.6:8000"
          echo "  ‚Ä¢ Docs: http://147.79.83.6:8000/docs"